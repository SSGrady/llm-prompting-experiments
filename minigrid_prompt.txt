Generate a DAG unique from the example below that represents a handful of paths from the Start State to the Goal State. A state is defined by a conjunction of ground predicates using the following list:

Start State: OutsideRoom, Goal State: Green_Goal
Objects: Key1, Key2, Key3, Door, Lava, Wall
Predicates: At(?), Holding(?), Unlocked(?)

Each path should include intermediate states logically required to progress from the start to the goal. Paths should follow the constraints of the environment and valid object interactions.

Output the DAG in JSON format as a 2-D array of possible paths. Do not include any additional information. Example:
{"paths": [[
      "At(OutsideRoom)",
      "Holding(Key1)",
      "Unlocked(Door)",
      "At(Green_Goal)"
    ],[
      "At(OutsideRoom)",
      "Holding(Key2)",
      "Unlocked(Door)",
      "At(Green_Goal)"
    ],[
      "At(OutsideRoom)",
      "Holding(Key3)",
      "Unlocked(Door)",
      "At(Green_Goal)"
    ],[
      "At(OutsideRoom)",
      "At(Wall)",
      "At(Green_Goal)"
    ]]}